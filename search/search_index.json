{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>The demo application requires  three pieces of information from friendly people at RICOH.</p> <ol> <li>Client ID</li> <li>Client Secret</li> <li>Private Key</li> </ol> <p>In addition, it is recommended you get a username and password for the partner technical documentation.</p>"},{"location":"#installation-and-setup","title":"Installation and Setup","text":"<ol> <li>clone down repo oppkey-ricoh-viewer-demo-basic</li> <li>Install Node.js - Note that Oppkey uses nvm to manage node versions.  However, it may be simpler for you to install node straight from the node site.</li> <li>In the root directory of the project, run <code>npm install</code></li> <li>create a <code>secrets.env</code> file in the project root. The file has this format:</li> </ol> <pre><code>CLIENT_ID=&lt;Your unique client id from RICOH Cloud API&gt;\nCLIENT_SECRET=&lt;client secret for your client id for RICOH CLOUD API&gt;\nPRIVATE_KEY=\"&lt;long private key for the viewer&gt;\"\n</code></pre> <p>Full <code>secrets.env</code> used by Oppkey is available here. The private key, client id, and client secret are in a private GitHub repo. If you are a RICOH staff or partner and have authorization to use the Oppkey client id, private key, and client secret, then contact Oppkey and we will send you the file. Otherwise, please use your own credentials you received from RICOH.</p>"},{"location":"#start-server","title":"Start Server","text":"<ol> <li>Run <code>npm run start</code>, the app should start locally on port 3000, <code>http://localhost:3000</code></li> <li>There are three buttons: community, documentation, viewer.  Click on the viewer button.</li> </ol>"},{"location":"cloud/","title":"Public Cloud Access","text":"<p>You can either log into the existing Oppkey server or deploy your own server.</p>"},{"location":"cloud/#live-site-httpsr360oppgetcom","title":"Live site: https://r360.oppget.com/","text":"<p>Contact Oppkey for login to our public cloud site to browse around.</p>"},{"location":"cloud/#example-to-deploy-on-vercel","title":"Example to Deploy on Vercel","text":"<p>The site above is deployed on Vercel. If you want to see the code we use for deployment as a reference, contact Oppkey for an example showing how to deploy to Vercel and protect the site with basic authentication login.</p> <p>With login, the <code>secrets.env</code> needs to contain the <code>OPPKEY_VIEWER_PASSWORD</code> and <code>OPPKEY_VIEWER_USERNAME</code> environmental variable.</p> <p>If you are stuck, we have a working example of the <code>secrets.env</code> file here. We will need to get authorization to send you the example file.</p> <pre><code>OPPKEY_VIEWER_PASSWORD=ChangeMe\nOPPKEY_VIEWER_USERNAME=devuser\nSESSION_SECRET=93qBc2janrrGcwvOxIEth3RFgf31Cg0K\nCLIENT_ID=&lt;Your unique client id from RICOH Cloud API&gt;\nCLIENT_SECRET=&lt;client secret for your client id for RICOH Cloud API&gt;\nPRIVATE_KEY=\"&lt;long private key for the viewer&gt;\"\n</code></pre> <p>With the login example, the browser will open a sign in window. You can change the credentials in the <code>secrets.env</code> file for local testing.</p> <p></p> <p>The repository example includes deployment configuration to Vercel, free plan.  If you deploy to the public Vercel cloud, you must set the environmental variables in Vercel. A free alternative to Vercel is Netlify.  </p>"},{"location":"cloud/#example-verceljson","title":"example vercel.json","text":"<pre><code>{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"./index.js\",\n      \"use\": \"@vercel/node\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/\"\n    }\n  ]\n}\n</code></pre>"},{"location":"cloudapi/","title":"Cloud API Direct Usage","text":"<p>The RICOH360 Viewer uses the RICOH360 Cloud API. All the demonstrations use the content API to get a list of images with their associated content_id.</p> <p>This is an example of using the RICOH360 Cloud API to get a listing of 40 images.  In the example below, <code>get_token_for_cloud_content()</code> is a method that I made to access Amazon Cognito to get a RICOH360 Cloud token.</p> <pre><code># Function to query content from the RICOH360 API\ndef get_content():\n    get_token_for_cloud_content()\n    cloud_content_token = session[\"ricoh_cloud_token\"]\n    # Fetch content using the token\n    content_headers = {\"Authorization\": f\"Bearer {cloud_content_token}\"}\n    content_response = requests.get(\n        \"https://api.ricoh360.com/contents?limit=40\", headers=content_headers\n    )\n    content_data = content_response.json()\n    return content_data\n</code></pre> <p>When using the RICOH360 Viewer to do the transform, you add the name of the transform, <code>enhancement</code>, after the property <code>transform</code>.</p> <pre><code>viewer.switchScene(\n    {\n        contentId: contentId,\n        transform: 'enhancement'\n    }, \"1\"\n)\n</code></pre> <p>Once the RICOH360 Viewer is set up, the API is nice and easy. You can see from the example above, that the transform and placement of the image to the right pane, index 1, is very easy.</p> <p>Although the transformations such as enhancement are in the viewer API, other transforms may require direct calls to the Cloud API.</p> <p>You can also do transforms that are not available through the viewer.</p> <p>This server-side example with Flask and Python requests module shows how to do a transform to stage a room.</p> <pre><code>content_response = requests.get(\n    f\"https://api.ricoh360.com/contents/{content_id}/staging:type_living_room\", headers=content_headers\n)\n</code></pre> <p></p> <p>Full source code is available on GitHub.</p> <p>The demonstration uses a Python Flask backend with a Jinja HTML template front-end.</p> <p></p>"},{"location":"cloudapi/#storing-ricoh360-viewer-for-multiple-requests","title":"storing RICOH360 Viewer for multiple requests","text":"<p>To use the RICOH360 Viewer, a token is required.</p> <p>This example uses the PyJWT package to generate a token with the RICOH360 Viewer Private Key and Client ID.  The key and ID must be obtained from RICOH.  The Private Key is different from the Client Secret used to get content from the RICOH360 Cloud API.</p> <pre><code>from flask import Flask, render_template, request, session\n\ndef create_viewer_token():\n    payload = {\"client_id\": CLIENT_ID}\n    token = jwt.encode(payload, PRIVATE_KEY, algorithm=\"RS256\")\n    session[\"viewer_token\"] = token\n    # Decode to UTF-8 if necessary\n    return token if isinstance(token, str) else token.decode(\"utf-8\")\n</code></pre> <p>In the snippet above, I am storing the token in a Flask <code>session</code>.</p> <p>To retrieve the token from the session, use the syntax <code>session[\"viewer_token\"]</code></p> <p><code>session</code> is a keyword from Flask that I imported.  <code>viewer_token</code> is the variable name that I made to  hold the viewer token.</p> <pre><code>@app.route(\"/livingroom\")\ndef stage():\n    content_id = request.args.get('contentId')\n    staging_index = int(request.args.get('stagingIndex'))\n    viewer_token = session[\"viewer_token\"]\n    cloud_token = session[\"ricoh_cloud_token\"]\n</code></pre> <p>The staging transform returns an array of three different staging placements.  In each of the three elements, the furniture is placed in different areas of the living room.</p> <p>To select a specifc placement, the HTML GUI passes an index number to the <code>stage</code> method using a query.</p> <pre><code># print(f\"cloud token: {cloud_token}\")\ncontent_headers = {\"Authorization\": f\"Bearer {cloud_token}\"}\ncontent_response = requests.get(\n    f\"https://api.ricoh360.com/contents/{content_id}/staging:type_living_room\", headers=content_headers\n)\nresponse_dict = content_response.json()\nfirst_content_id = response_dict[\"results\"][staging_index][\"content_id\"]\nprint(f\"first content ID: {first_content_id}\")\nprint(json.dumps(response_dict, indent=4, sort_keys=True))\nreturn render_template(\"single_image.html\",\n                        token=viewer_token,\n                        contentId=first_content_id,\n                        )\n</code></pre> <p>Please refer to the GitHub example for the full code.</p>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#ricoh","title":"RICOH","text":"<p>Client ID, Client Secret, and Private Key are distributed by RICOH.</p> <ul> <li>Request access here: https://www.ricoh360.com/contact/</li> </ul>"},{"location":"contact/#oppkey","title":"Oppkey","text":"<p>This site is run by Oppkey. If you have questions, please contact us here: info@oppkey.com</p>"},{"location":"contact/#help-we-can-provide","title":"Help We Can Provide","text":"<ul> <li>Username and password for public site - r360.oppget.com</li> <li>Access to Oppkey credentials, if authorized by RICOH</li> </ul>"},{"location":"features/","title":"Features","text":""},{"location":"features/#image-enhancement","title":"Image Enhancement","text":"<p>This feature can improve image quality, especially resolution, noise, and color aberration.</p> <p>Perform Low Light Enhancement on images with ISO 400 or higher. If the ISO sensitivity is set below 400, normal enhancement processing is performed. Uses API option <code>sr_lle_auto</code>.</p> <p>Example 1: Dark interior Carlesbad Caverns National Park </p> <p>Example 2: Dark interior car garage </p>"},{"location":"features/#split-screen","title":"Split Screen","text":"<p>The RICOH360 Viewer can show a split screen view. Movement and zoom of the 2 images at the same time can be locked or unlocked.</p> <p></p>"},{"location":"features/#navigation","title":"Navigation","text":"<p>Navigation controls at bottom of screen allow viewer to select Zoom In, Zoom Out, Auto Rotate, Home Position, Enter Full Screen, Enter Cropping, and Enter Drawing.</p> <p></p>"},{"location":"features/#drawing","title":"Drawing","text":"<p>Drawings move with the image when the viewer is moved.  There are an eraser, different color pens, and different line thicknesses.</p> <p></p> <p>Written notes and simple drawings appear in viewer.</p> <p></p>"},{"location":"features/#annotation","title":"Annotation","text":"<p>You can use the keyboard to input an annotation and place a rounded squarish icon in the scene that tells people that there is more information available.  </p> <p></p> <p>Selecting the icon will display the information on the picture.</p> <p></p>"},{"location":"features/#cropping","title":"Cropping","text":"<p>Key portions of the 360\u00b0 image can be cropped and saved locally.</p> <p>Choose Enter Cropping</p> <p></p> <p>Select area</p> <p> </p> <p>Cancel or Save Locally</p> <p></p> <p>Choose Location to Save Locally</p> <p></p>"},{"location":"features/#a-note-on-demo-ui","title":"A Note on Demo UI","text":"<ul> <li>Below the main image, there are two lists of images. Choose from the left list of images to pick the main viewer image. If you use the split screen, use the right list to choose the second image.</li> </ul> <ul> <li>To compare Low Light Enhancement, choose a dark image on the left. Choose the same dark image on the right. Click the Enhance button on the right image, showing Low Light Enhancement. </li> <li>Note: If you want to test the Blur function, be sure to choose an image with people in it.</li> </ul>"},{"location":"overview/","title":"Demo Overview","text":"<p>The demo is intended to be a live hosted site on AWS or Vercel. It consists of a backend server and a front end web application. The server can be run on a laptop with node.</p>"},{"location":"overview/#process","title":"Process","text":"<ol> <li>Web browser goes to r360.oppget.com (business app server)</li> <li>r360.oppget automatically pulls down RICOH Viewer and gains access with PrivateKey. Web token is generated for the Viewer access.</li> <li>Using RICOH Viewer API and Client ID / Client Secret, a web token is generated for the RICOH360 content API</li> <li>r360.oppkey contacts RICOH360 Content server and pulls down information, which is sent to web browser</li> </ol>"},{"location":"overview/#step-1","title":"Step 1","text":""},{"location":"overview/#go-to-business-application-site","title":"Go to Business Application Site","text":"<p>Developer builds a business application with login for their customers or staff to view and manage 360 image content</p> <p></p>"},{"location":"overview/#step-2","title":"Step 2","text":""},{"location":"overview/#loading-view-in-html","title":"Loading View in HTML","text":"<pre><code>&lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;\n&lt;/script&gt;\n</code></pre> <p>NOTE: The backend application must generate a token with the PrivateKey and make it available to the viewer. Example uses jsonwebtoken JavaScript package.</p> <pre><code>const accessToken = jwt.sign(payload, privatekey, {\n   algorithm: \"RS256\",\n   expiresIn: \"60m\",\n });\n</code></pre> <p>The token for the viewer is not the same as the token generated for the RICOH360 Platform Content API.</p>"},{"location":"overview/#step-3","title":"Step 3","text":""},{"location":"overview/#generate-token-for-ricoh360-cloud-api","title":"Generate Token for RICOH360 Cloud API","text":"<pre><code>const tokenEndpoint =\n   \"https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token\";\n const auth = Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\");\n const requestData = {\n   method: \"POST\",\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\",\n     Authorization: `Basic ${auth}`,\n   },\n   body: new URLSearchParams({\n     grant_type: \"client_credentials\",\n     scope: \"all/read\",\n   }),\n };\n const tokenResponse = await fetch(tokenEndpoint, requestData);\n const tokenObject = await tokenResponse.json();\n</code></pre>"},{"location":"overview/#step-4","title":"Step 4","text":""},{"location":"overview/#use-viewer-blur-api-from-button","title":"Use Viewer Blur API from Button","text":"<pre><code>&lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n                data[i].content_id\n              }',transform:'b_person'},${0})\"&gt;\n                Blur People\n              &lt;/button&gt;\n</code></pre>"},{"location":"python/","title":"Python Demo with Flask and Jinja","text":"<p>An example Python Flask server is in the python_server.py file.</p> <p>Python is an alternative to JavaScript on the backend.  If your backend infrascture uses JavaScript, you do not need to use Python.</p> <p>The backend can be built with any language.  Python is used to illustrate a simple example of using any backend framework.</p> <p>To run the Python demo, follow the step below.</p> <pre><code>python -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\npython python_server.py\n</code></pre> <p>You will then need to open a web browser at the URL provided.</p> <pre><code>python python_server.py\n * Serving Flask app 'python_server'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:3000\n</code></pre>"},{"location":"python/#viewer-token-creation-using-pyjwt","title":"viewer token creation using PyJWT","text":"<p>The demo uses PyJWT to create the web token.  To create the token, you must use the Private Key obtained from RICOH.  This demo does not come with a private key.</p> <p>You must have the private key in your  <code>secrets.env</code> file.</p> <pre><code># Function to create a JWT token for the viewer API\ndef create_token():\n    payload = {\"client_id\": CLIENT_ID}\n    token = jwt.encode(payload, PRIVATE_KEY, algorithm=\"RS256\")\n    # Decode to UTF-8 if necessary\n\n    return token if isinstance(token, str) else token.decode(\"utf-8\")\n</code></pre>"},{"location":"python/#viewer-html-template-with-jinja2","title":"viewer HTML template with Jinja2","text":"<p>The HTML file to display the viewer is in <code>views/flask_viewer.html</code>.</p> <p>The viewer is imported with this line:</p> <p><code>&lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;&lt;/script&gt;</code></p>"},{"location":"python/#viewer-instantiation","title":"Viewer instantiation","text":"<p>The fetchToken method returns the token generated in the Python file. The Python variable that was passed into the HTML is in double quotes <code>{{token}}</code>.</p> <pre><code>const fetchToken = () =&gt; \"{{token}}\";\n\nconst viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: fetchToken,\n    isCubemapEnabled: true,\n    ui,\nonSelected: (index) =&gt; {\n    console.log(\"index: \", index);\n    },\n    onCropped: onCropped,\n}\n);\n</code></pre>"},{"location":"python/#image-selection-demo","title":"Image Selection Demo","text":"<p>The left pane is index 0.  The right pane is index 1.</p> <p></p> <p>This is an example creating the list of image for selection. The <code>contentId</code> and <code>thumbnail_url</code> are parsed in JavaScript from the data sent from Python.</p> <p>In actual use, you may want to parse the data from the RICOH Cloud API in the Python server-side code in order to improve performance and reduce the data transmitted over the network.</p> <pre><code> const leftList = document.getElementById(\"leftList\");\n    for (let i = 0; i &lt; data.length; i++) {\n    if (data[i].status === \"uploaded\") {\n        // console.log(data[i]);\n        const listItem = document.createElement(\"li\");\n        listItem.innerHTML = `&lt;div class=\"p-1\"&gt;\n        &lt;img style=\"cursor: pointer;\" src=\"${\n            data[i].thumbnail_url\n        }\" onclick=\"viewer.switchScene({ contentId: '${\n        data[i].content_id\n        }'},${0})\"&gt;\n        &lt;button type=\"button\" class = \"btn btn-primary mt-1\" onclick=\"viewer.switchScene({ contentId: '${\n            data[i].content_id\n        }',transform:'enhancement'},${0})\"&gt;\n            Enhance\n        &lt;/button&gt;\n        &lt;button type=\"button\" class = \"btn btn-primary mt-1\" onclick=\"viewer.switchScene({ contentId: '${\n            data[i].content_id\n        }',transform:'b_person'},${0})\"&gt;\n            Blur People\n        &lt;/button&gt;\n        &lt;button type=\"button\" class = \"btn btn-primary mt-1\" onclick=\"viewer.switchScene({ contentId: '${\n            data[i].content_id\n        }',transform:'p_cubic'},${0})\"&gt;\n            Cubic View\n        &lt;/button&gt;\n        &lt;/div&gt;`;\n        leftList.append(listItem);\n    }\n</code></pre>"},{"location":"structure/","title":"Project Structure","text":"<p>To use the viewer, build a simple server to provide routes for the UI that you embed the viewer in.</p> <p>This example uses  Express for the server. Let's say you create two routes, <code>/viewer</code> and <code>/content</code>.  The first route to <code>/viewer</code> loads the React app that then loads the RICOH Viewer.  The React app will also load  content with a HTTP GET request to  <code>/content</code>.</p> <p>In the code example <code>views/viewer.ejs</code>, this snippet goes to the <code>/content</code> route.</p> <pre><code>const res = await fetch(\"/content\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          },\n        });\n</code></pre> <p>When the app calls <code>/content</code>, Express will run a method that you created. In this example, the method is called <code>getContent()</code>.</p> <p></p> <p>Prior to actually getting the content, you must first generate a token. The function <code>getContent()</code> will first generate a token, then it will get the content from the RICOH360 Content API.  The token is put into the Authorization header.</p> <p>The example below uses the JavaScript fetch package.</p> <pre><code>fetch(\"https://api.ricoh360.com/contents\", {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + tokenObject.access_token,\n    },\n  });\n</code></pre> <ul> <li>views/: Folder that holds view/HTML files (EJS markdown files)</li> <li>index.ejs: Home/landing page template</li> <li>viewer.ejs: Viewer page template</li> <li>index.js: File where server side functions and API endpoints to these functions are held</li> </ul>"},{"location":"structure/#tokens","title":"Tokens","text":"<p>The demo uses two different tokens.  There is a token for the viewer and a token for the content API. It can be confusing.  Don't worry, we'll walk you through it.</p> <p>The token for the Content API is generated with Amazon Cognito with the Client ID and Client Secret.</p> <p>The token for the RICOH Viewer is generated with the Client ID and Private Key using jsonwebtoken. </p> <p>The Private Key and the Client Secret are not the same.</p> <p>We provide examples for both tokens and show how to use them in your API calls.</p>"},{"location":"structure/#server-side-functions","title":"Server-side functions","text":""},{"location":"structure/#createtoken","title":"createToken()","text":"<pre><code>const privatekey = `-----BEGIN PRIVATE KEY-----\n  &lt;client private key&gt;\n-----END PRIVATE KEY-----`;\n\nconst createToken = () =&gt; {\n  const payload = {\n    client_id: &lt;your client id&gt;,\n  };\n\n  const accessToken = jwt.sign(payload, privatekey, {\n    algorithm: \"RS256\",\n    expiresIn: \"60m\",\n  });\n\n  return accessToken;\n};\n</code></pre> <ul> <li><code>createToken()</code> uses a payload object with your clientID and optionally your groupID</li> <li>Using jsonwebtoken package, you create and return an access token with an encryption algorithm that expires in a certain time (60 minutes)</li> <li>This function will be called client side via the API endpoint for this function and used in a callback function for Ricoh's viewer API</li> </ul>"},{"location":"structure/#getcontent","title":"getContent()","text":"<pre><code>const clientId = \"&lt;your client id&gt;\";\nconst clientSecret = \"&lt;your client secret&gt;\";\n\nconst getContent = async () =&gt; {\n  const tokenEndpoint =\n    \"https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token\";\n\n  const auth = Buffer.from(`${clientId}:${clientSecret}`).toString(\"base64\");\n\n  const requestData = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${auth}`,\n    },\n    body: new URLSearchParams({\n      grant_type: \"client_credentials\",\n      scope: \"all/read\",\n    }),\n  };\n\n  const tokenResponse = await fetch(tokenEndpoint, requestData);\n  const tokenObject = await tokenResponse.json();\n\n  const res = await fetch(\"https://api.ricoh360.com/contents\", {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + tokenObject.access_token,\n    },\n  });\n  const data = await res.json();\n\n  return data;\n};\n</code></pre> <ul> <li>This function takes your clientID and clientSecret, turns it into base64 string format and sends a post request to <code>https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token</code> (set as tokenEndpoint) to get a token to use for Ricoh content API</li> <li>After getting the token response, it creates another post request to Ricoh content API with the token as authorization and returning the data</li> </ul>"},{"location":"structure/#server-side-endpoints","title":"Server-side endpoints","text":""},{"location":"structure/#_1","title":"/","text":"<pre><code>app.get(\"/\", (req, res) =&gt; {\n  res.render(\"index\");\n});\n</code></pre> <p>This endpoint returns the EJS template file (index.ejs) in ./views</p>"},{"location":"structure/#viewer","title":"/viewer","text":"<pre><code>app.get(\"/viewer\", (req, res) =&gt; {\n  res.render(\"viewer\");\n});\n</code></pre> <p>Calls up the main viewer with the split view, transformations, and content.</p>"},{"location":"structure/#token","title":"/token","text":"<pre><code>app.get(\"/token\", (req, res) =&gt; {\n  let token = createToken();\n  res.status(200).send(token);\n});\n</code></pre> <p>This endpoint calls on the <code>createToken()</code> server-side function and returns the token</p>"},{"location":"structure/#content","title":"/content","text":"<pre><code>app.get(\"/content\", async (req, res) =&gt; {\n  let test = await getContent();\n  res.status(200).send(test);\n});\n</code></pre> <p>This endpoint calls on the <code>getContent()</code> async function and returns the content data which is needed by the viewer.</p>"},{"location":"structure/#client-side-in-viewsindexejs","title":"Client-side (in ./views/index.ejs)","text":""},{"location":"structure/#fetchcontent","title":"fetchContent","text":"<pre><code>const fetchContent = async () =&gt; {\n\n  // fetch content from /content endpoint and store data in const data\n  const res = await fetch(\"/content\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n  const data = await res.json();\n\n  // populate buttons on left pane list\n  const leftList = document.getElementById(\"leftList\");\n  for (let i = 0; i &lt; data.length; i++) {\n    if (data[i].status === \"uploaded\") {\n      console.log(data[i]);\n      const listItem = document.createElement(\"li\");\n      listItem.innerHTML = `&lt;div&gt;\n        &lt;img src=\"${\n          data[i].thumbnail_url\n        }\" onclick=\"viewer.switchScene({ contentId: '${\n        data[i].content_id\n      }'},${0})\"&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'enhancement'},${0})\"&gt;\n          Enhance\n        &lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'b_person'},${0})\"&gt;\n          Blur People\n        &lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'p_cubic'},${0})\"&gt;\n          Cubic View\n        &lt;/button&gt;\n      &lt;/div&gt;`;\n      leftList.append(listItem);\n    }\n  }\n\n  // populate buttons on right pane list\n  const rightList = document.getElementById(\"rightList\");\n  for (let i = 0; i &lt; data.length; i++) {\n    if (data[i].status === \"uploaded\") {\n      console.log(data[i]);\n      const listItem = document.createElement(\"li\");\n      listItem.innerHTML = `&lt;div&gt;\n        &lt;img src=\"${\n          data[i].thumbnail_url\n        }\" onclick=\"viewer.switchScene({ contentId: '${\n        data[i].content_id\n      }'},${1})\"&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'enhancement'},${1})\"&gt;\n          Enhance\n        &lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'b_person'},${1})\"&gt;\n          Blur People\n        &lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"viewer.switchScene({ contentId: '${\n          data[i].content_id\n        }',transform:'p_cubic'},${1})\"&gt;\n          Cubic View\n        &lt;/button&gt;\n      &lt;/div&gt;`;\n      rightList.append(listItem);\n    }\n  }\n};\n</code></pre> <p><code>fetchContent()</code> makes a async get request to the backend endpoint /content and returns content data and populates listing of images with transform buttons</p>"},{"location":"structure/#fetchtoken","title":"fetchToken()","text":"<pre><code>const fetchToken = async () =&gt; {\n  const res = await fetch(\"/token\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  });\n  const data = await res.text();\n  return data;\n};\n</code></pre> <p><code>fetchToken()</code> makes a async get request to the backend endpoint /token and returns a token</p>"},{"location":"structure/#ui","title":"ui","text":"<pre><code>const ui = {\n  cropping: {\n    horizontalMargin: 15,\n    verticalMargin: 75,\n  },\n  toolbar: {\n    isHidden: false,\n    cancelButton: {\n      label: \"Cancel\",\n    },\n    checkButton: {\n      label: \"Done\",\n    },\n    autoRotateButton: {\n      isHidden: false,\n      label: \"Auto Rotate\",\n    },\n    croppingButton: {\n      isHidden: false,\n      enterLabel: \"Enter Cropping\",\n      exitLabel: \"Exit Cropping\",\n    },\n    annotationButton: {\n      isHidden: false,\n      enterLabel: \"Use keyboard to annotate\",\n      exitLabel: \"Exit keyboard annotation\",\n    },\n    drawingButton: {\n      isHidden: false,\n      enterLabel: \"Enter Drawing\",\n      exitLabel: \"Exit Drawing\",\n    },\n    fullScreenButton: {\n      isHidden: false,\n      enterLabel: \"Enter Full Screen\",\n      exitLabel: \"Exit Full Screen\",\n    },\n    homePositionButton: {\n      isHidden: false,\n      label: \"Home Position\",\n    },\n    zoomControlButtons: {\n      isHidden: false,\n      zoomInLabel: \"Zoom In\",\n      zoomOutLabel: \"Zoom Out\",\n    },\n  },\n  tooltip: {\n    isHidden: false,\n  },\n  verticalPanel: {\n    isHidden: false,\n    topMargin: 25,\n  },\n};\n</code></pre> <ul> <li>Const ui is a parameter that is passed into the viewer object</li> <li>Allows definition and hiding/showing of ui buttons and functionalities</li> </ul>"},{"location":"structure/#oncropped","title":"onCropped","text":"<pre><code>const onCropped = async (url) =&gt; {\n  const image = await fetch(url);\n  const imageBlob = await image.blob();\n  const imageURL = URL.createObjectURL(imageBlob);\n  const downloadLink = document.createElement('a');\n  downloadLink.href = imageURL;\n  downloadLink.download = 'cropped_image.jpeg';\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n};\n</code></pre> <p>In the viewer, there is a crop function, that crop function passes in the cropped image URL to this callback function and downloads the cropped image to your computer.</p>"},{"location":"structure/#viewer_1","title":"viewer","text":"<pre><code>const viewer = new RICOH360Viewer({\n  divId: \"viewer\",\n  onFetchToken: fetchToken,\n  isCubemapEnabled: true,\n  ui,\n  onSelected: (index) =&gt; {\n    console.log(\"selected\", index);\n  },\n});\n\nviewer.start({\n  contentId: \"&lt;Content ID from fetchContent&gt;\",\n  transform: \"enhancement\",\n});\n</code></pre> <ul> <li>Viewer is Ricoh embedded viewer API</li> <li>Viewer is initialized by specific a divId to inject the viewer UI into, an onFetchToken function for authorization and a CubeMapEnabled</li> <li>Viewer is started with a contentID (call <code>fetchContent()</code> function to get contentIDs) and a transform value ie. \"enhancement\" or \"undefined\"</li> </ul>"},{"location":"tutorial/","title":"RICOH360 Viewer Tutorial","text":"<p>This tutorial takes you from a blank file to the point where you can display an image in a web browser.</p> <p>There are two components: front-end and back-end.</p> component name function front-end index.html load RICOH360 Viewer back-end server.py send content to viewer and handle security <p>The suggested way to use this tutorial is to start with a blank file using an editor like VSCode.  Type in all the code snippets one section at a time. For each section, take a moment to understand the functionality.  For example, one section is on token creation for the RICOH360 Viewer.  Another section is on token creation for the RICOH360 Cloud API. The two tokens are different and use different token generation technologies.</p> <p>If you get stuck, you can refer to the completed code on GitHub or copy and paste the snippet into your own application.</p> <p>Tutorial code on GitHub</p>"},{"location":"tutorial/#front-end-html-file","title":"front-end HTML File","text":"<p>Create a barebones HTML file called <code>index.html</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Insert the viewer in the head.</p> <p><code>&lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;&lt;/script&gt;</code></p> <p>In the body, create a div with <code>id=\"viewer\"</code>.</p> <pre><code>&lt;div\nstyle=\"\n    position: relative;\n    width: 100%;\n    height: 650px;\n    background-color: #2a303c;\n\"\n&gt;\n&lt;div id=\"viewer\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"tutorial/#instantiate-viewer","title":"instantiate viewer","text":"<p>In the snippet below, we will pass the token into the <code>index.html</code> from Flask.</p> <pre><code>  &lt;script&gt;\n  const viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n  });\n&lt;/script&gt;\n</code></pre> <p>At this stage, the <code>index.html</code> file looks like this.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div\n    style=\"\n      position: relative;\n      width: 100%;\n      height: 650px;\n      background-color: #2a303c;\n    \"\n  &gt;\n    &lt;div id=\"viewer\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n  const viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n  });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The viewer can't be instantiated because it needs a token.</p>"},{"location":"tutorial/#secretsenv","title":"secrets.env","text":"<p>Using the following information obtained from RICOH, create a <code>secrets.env</code> file.</p> <ol> <li>Client ID</li> <li>Client Secrete</li> <li>Private Key</li> </ol> <p></p>"},{"location":"tutorial/#back-end-python-file","title":"back-end Python file","text":"<p>Create a new python file in the same directory called <code>server.py</code> in the same directory as the <code>index.html</code> file.</p> <p>Create virtual environment.</p> <p><code>python -m venv venv</code></p> <p>Activate virtual environment.</p> <p><code>source venv/bin/activate</code></p> <p>The file structure will look like this.</p> <p></p> <p>Install dependencies.</p> <p><code>pip install PyJWT Flask python-dotenv requests</code></p> <p>Add skeleton flask server code.</p> <pre><code>from flask import Flask, render_template\nimport jwt\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv(\"secrets.env\")\n\napp = Flask(__name__)\napp.template_folder = \".\"\n\n# Retrieve environment variables\nPRIVATE_KEY = os.getenv(\"PRIVATE_KEY\")\nCLIENT_ID = os.getenv(\"CLIENT_ID\")\nCLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\n\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n\nif __name__ == \"__main__\":\n    app.run(port=3000, debug=True)\n    print(\"Open browser at http://localhost:3000 or http://127.0.0.1:3000\")\n</code></pre> <p>At this stage, if you open the browser, you will just have a black screen.  You won't be able to see the image because you still need to pass the viewer the <code>token</code> and the <code>contentId</code></p> <p>You can test the server with:</p> <pre><code>python server.py\n* Serving Flask app 'server'\n * Debug mode: on\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:3000\nPress CTRL+C to quit\n</code></pre> <p></p>"},{"location":"tutorial/#creating-the-token-for-the-ricoh360-viewer","title":"creating the token for the RICOH360 Viewer","text":"<p>Install <code>cryptography</code> to generate token.</p> <p><code>pip install cryptography</code></p> <p>Create the method <code>create_token</code> above the route.</p> <pre><code>def create_token():\n    payload = {\"client_id\": CLIENT_ID}\n    token = jwt.encode(payload, PRIVATE_KEY, algorithm=\"RS256\")\n    # Decode to UTF-8 if necessary\n\n    return token if isinstance(token, str) else token.decode(\"utf-8\")\n</code></pre> <p>Pass the token to the HTML page.</p> <pre><code>@app.route(\"/\")\ndef index():\n    token = create_token()\n    return render_template(\"index.html\",  token=token)\n</code></pre> <p>Run the server and test it again to make sure the token is being created.</p>"},{"location":"tutorial/#token-display-challenge","title":"token display challenge","text":"<p>As a challenge, display the token on  your HTML page using this syntax <code>{{name_of_token_variable}}</code></p> <p></p>"},{"location":"tutorial/#accessing-content","title":"accessing content","text":"<p>To get the content, you first need to generate a token for the content using Amazon Cognito.</p> <p>You then use the content token to query the RICOH Cloud API.</p> <p>First, install Python <code>requests</code> to make an HTTP call.</p> <p><code>pip install requests</code></p> <p>To make the request to Cognito, you need to import the <code>base64</code> package.</p> <p>Your imports will look like this:</p> <pre><code>import requests\nimport base64\n</code></pre>"},{"location":"tutorial/#generating-ricoh360-cloud-content-token-with-amazon-cognito","title":"Generating RICOH360 Cloud Content Token with Amazon Cognito","text":"<p>First, use the method below to create a token for the RICOH60 Cloud.</p> <pre><code>def get_token_for_cloud_content():\n    # Endpoint and authentication for AWS token\n    token_endpoint = \"https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token\"  # noqa: E501\n    auth = base64.b64encode(f\"{CLIENT_ID}:{CLIENT_SECRET}\".encode()).decode(\"utf-8\")  # noqa: E501\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": f\"Basic {auth}\",\n    }\n    body = {\"grant_type\": \"client_credentials\", \"scope\": \"all/read\"}\n\n    # Request AWS token\n    token_response = requests.post(token_endpoint, headers=headers, data=body)\n    token_object = token_response.json()\n    ricoh_cloud_access_token = token_object.get(\"access_token\")\n    return ricoh_cloud_access_token\n</code></pre>"},{"location":"tutorial/#send-request-to-ricoh360-cloud-api","title":"Send Request to RICOH360 Cloud API","text":"<p>With the token for the Cloud API, you can now send a request for content.</p>"},{"location":"tutorial/#query-content-from-the-ricoh360-api","title":"Query content from the RICOH360 API","text":"<p>The code below will get a single piece of content from the RICOH Cloud API.</p> <pre><code>def get_content():\n    cloud_content_token = get_token_for_cloud_content()\n    # Fetch content using the token\n    content_headers = {\"Authorization\": f\"Bearer {cloud_content_token}\"}\n    content_response = requests.get(\n        \"https://api.ricoh360.com/contents?limit=1\", headers=content_headers\n    )\n    content_data = content_response.json()\n    return content_data\n</code></pre>"},{"location":"tutorial/#parse-content_id-and-send-to-html-template","title":"parse content_id and send to HTML template","text":"<p>In the return line, make sure you had <code>contentId=contentId</code> to the variables sent to the <code>index.html</code> file.</p> <pre><code>@app.route(\"/\")\ndef index():\n    token = create_token()\n    content_data = get_content()\n    contentId = content_data[0][\"content_id\"]\n    print(f\"contentId: {contentId}\")\n    return render_template(\"index.html\",  token=token, contentId=contentId)\n</code></pre>"},{"location":"tutorial/#completed-back-end-python-code-listing","title":"completed back-end Python code listing","text":"<pre><code>from flask import Flask, render_template\nimport jwt\nimport os\nfrom dotenv import load_dotenv\nimport requests\nimport base64\n\n\nload_dotenv(\"secrets.env\")\n\napp = Flask(__name__)\napp.template_folder = \"views\"\napp.static_folder = \"public\"\n\n# Retrieve environment variables\nPRIVATE_KEY = os.getenv(\"PRIVATE_KEY\")\nCLIENT_ID = os.getenv(\"CLIENT_ID\")\nCLIENT_SECRET = os.getenv(\"CLIENT_SECRET\")\n\n\ndef create_token():\n    payload = {\"client_id\": CLIENT_ID}\n    token = jwt.encode(payload, PRIVATE_KEY, algorithm=\"RS256\")\n    # Decode to UTF-8 if necessary\n\n    return token if isinstance(token, str) else token.decode(\"utf-8\")\n\n\ndef get_token_for_cloud_content():\n    # Endpoint and authentication for AWS token\n    token_endpoint = \"https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token\"  # noqa: E501\n    auth = base64.b64encode(f\"{CLIENT_ID}:{CLIENT_SECRET}\".encode()).decode(\"utf-8\")  # noqa: E501\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": f\"Basic {auth}\",\n    }\n    body = {\"grant_type\": \"client_credentials\", \"scope\": \"all/read\"}\n\n    # Request AWS token\n    token_response = requests.post(token_endpoint, headers=headers, data=body)\n    token_object = token_response.json()\n    ricoh_cloud_access_token = token_object.get(\"access_token\")\n    return ricoh_cloud_access_token\n\n\n# Function to query content from the RICOH360 API\ndef get_content():\n    cloud_content_token = get_token_for_cloud_content()\n    # Fetch content using the token\n    content_headers = {\"Authorization\": f\"Bearer {cloud_content_token}\"}\n    content_response = requests.get(\n        \"https://api.ricoh360.com/contents?limit=1\", headers=content_headers\n    )\n    content_data = content_response.json()\n    return content_data\n\n\n@app.route(\"/\")\ndef index():\n    token = create_token()\n    content_data = get_content()\n    contentId = content_data[0][\"content_id\"]\n    print(f\"contentId: {contentId}\")\n    return render_template(\"index.html\",  token=token, contentId=contentId)\n\n\nif __name__ == \"__main__\":\n    app.run(port=3000, debug=True)\n    print(\"Open browser at http://localhost:3000 or http://127.0.0.1:3000\")\n</code></pre>"},{"location":"tutorial/#front-end-display-content-in-viewer","title":"front-end: display content in viewer","text":"<p>In <code>index.html</code>.</p> <pre><code>  viewer.start({\n    contentId: \"{{contentId}}\"\n  });\n</code></pre> <p></p>"},{"location":"tutorial/#completed-front-end-indexhtml","title":"completed front-end index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div\n    style=\"\n      position: relative;\n      width: 100%;\n      height: 650px;\n      background-color: #2a303c;\n    \"\n  &gt;\n    &lt;div id=\"viewer\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n  const viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n  });\n  viewer.start({\n    contentId: \"{{contentId}}\"\n  });\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial/#additional-challenges","title":"Additional Challenges","text":""},{"location":"tutorial/#insert-additional-ui-buttons-in-the-viewer","title":"insert additional UI buttons in the viewer","text":"<p>reference code</p> <p>Tip: Add the ui object into the viewer at time of instantiation.</p> <p></p> <p>The split pane button will work.</p> <p></p> <p>Solution is in the tutorial folder in <code>button-challenge.html</code>.</p>"},{"location":"tutorial/#simple-list-of-content","title":"simple list of content","text":"<p>We're passing a single image contentId into the HTML. Modifer the code to show a simple list.</p> <p></p> <p>In the server Python file</p> <pre><code># Function to query content from the RICOH360 API\ndef get_content():\n    cloud_content_token = get_token_for_cloud_content()\n    # Fetch content using the token\n    content_headers = {\"Authorization\": f\"Bearer {cloud_content_token}\"}\n    content_response = requests.get(\n        \"https://api.ricoh360.com/contents?limit=10\", headers=content_headers\n    )\n    content_data = content_response.json()\n    return content_data\n\n@app.route(\"/\")\ndef index():\n    token = create_token()\n    content_data = get_content()\n    contentIds = []\n    for single_content in content_data:\n        contentIds.append(single_content[\"content_id\"])\n    return render_template(\"simple-list-challenge.html\",  token=token, contentIds=contentIds)\n</code></pre> <p>in the HTML file</p> <pre><code>...\n...\n  viewer.start({\n    contentId: \"{{contentIds[0]}}\"\n  });\n&lt;/script&gt;\n\n{% for contentId in contentIds %}\n&lt;button onclick=\"viewer.switchScene({ contentId: '{{contentId}}'})\"&gt; {{ loop.index }}&lt;/button&gt;\n{% endfor %}\n</code></pre> <p>Solution in the tutorial folder on GitHub.</p>"},{"location":"tutorial/#content-list-as-thumbnail-with-enhancement","title":"content list as thumbnail with enhancement","text":"<p>The content from the RICOH360 Cloud has a URL for a thumbnail. The thumbnails are useful to select images.</p> <p></p> <p>Modify the Python server to send a list of thumbnail URLs to the HTML file.</p> <pre><code>@app.route(\"/\")\ndef index():\n    token = create_token()\n    content_data = get_content()\n    thumburls = []\n\n    contentIds = []\n    for single_content in content_data:\n        contentIds.append(single_content[\"content_id\"])\n        thumburls.append(single_content[\"thumbnail_url\"])\n    return render_template(\"list-with-transform.html\",\n                           token=token,\n                           contentIds=contentIds,\n                           thumburls=thumburls\n                           )\n</code></pre> <p>In the HTML file, the listing is built up from the thumbnail URLs.</p> <pre><code>  {% for contentId in contentIds %}\n  &lt;img onclick=\"switchViewerImage('{{contentId}}')\" src=\"{{thumburls[loop.index -1]}}\" alt=\"thumbnail\"\n  style=\"width:80px;height: 40px;\"&gt;\n  {% endfor %}\n</code></pre> <p>Example to switch the scene.</p> <pre><code>const switchViewerImage = async (contentId) =&gt; {\n    document.getElementById(\"currentContentId\").innerHTML = contentId;\n    const buttonElement = `&lt;button onclick=\"enhanceRightImage('${contentId}')\"&gt; enhance right &lt;/button&gt;`; \n    document.getElementById(\"rightEnhanceButton\").innerHTML = buttonElement;\n\n    const switchRightButtonElement = `&lt;button onclick=\"switchRightImage('${contentId}')\"&gt; sync right &lt;/button&gt;`;\n    document.getElementById(\"rightSwitchButton\").innerHTML = switchRightButtonElement;\n\n    console.log(\"contentId for left pane: \", contentId);\n\n    await viewer.switchScene(\n        {\n            contentId: contentId,\n        }\n    );\n}\n</code></pre> <p>Full working example in the tutorial folder.</p>"},{"location":"tutorial2/","title":"Alternate Tutorial for Minimal Application","text":"<p>The RICOH360 Viewer requires two things to start:</p> <ol> <li>token for viewer</li> <li>contentId for the image you want to show</li> </ol> index.html<pre><code>// instantiate viewer object\nconst viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n});\n// start viewer with content\nviewer.start({\n    contentId: \"{{contentId}}\"\n});\n</code></pre>"},{"location":"tutorial2/#setting-up-a-virtual-environment-on-python","title":"Setting up a virtual environment on Python","text":"<p>Although not required, I recommend that you set up a virtual environment on Python.  This avoids conflicting libraries on your main system Python.</p> <pre><code>python -m venv venv\nsource venv/bin/activate\n</code></pre> <p>You should now see a <code>(venv)</code> prompt.</p> <pre><code>(venv) craig@craigs-air practice %\n</code></pre> <p>Tip</p> <p>The Private Key and the Client Secret are not the same.  You must get the Client ID, Client Secret, and Private Key from RICOH.  The Private Key is for the Viewer.  The Client Secret is for the content.</p>"},{"location":"tutorial2/#viewer-token","title":"Viewer Token","text":"<p>To generate the viewer token, you need the following:</p> <ol> <li>Client ID</li> <li>Private Key</li> </ol> <p>We will use PyJWT and cryptography to generate the viewer token with the Private Key.</p>"},{"location":"tutorial2/#install-pyjwt-and-cryptography","title":"install PyJWT and cryptography","text":"<p>PyJWT is needed to generate the JSON Web Token that the viewer needs.  The cryptography package is needed for the RS256 encryption used to encode the token.</p> <pre><code>pip install PyJWT cryptography\n</code></pre> <p>Tip</p> <p>You can check the Python packages installed in your environment with <code>pip freeze</code></p>"},{"location":"tutorial2/#create-serverpy-file","title":"Create <code>server.py</code> file","text":"<p>Use VSCode or equivalent to create a file, <code>server.py</code>.</p> <p>At the top, include <code>import jwt</code>.</p> <p>Below the import, add your <code>PRIVATE_KEY</code> and <code>CLIENT_ID</code>. The Private Key is long.  Put it in triple quotes.</p> <p></p> <p>The Client ID is shorter.</p> <p></p> <p>With the <code>CLIENT_ID</code> and <code>PRIVATE_KEY</code> set in your Python script, you can now generate the token for the RICOH360 Viewer.</p> server.py<pre><code># generate token for RICOH360 Viewer\npayload = {\"client_id\": CLIENT_ID}\ntoken = jwt.encode(payload, PRIVATE_KEY, algorithm=\"RS256\")\nprint(f\"token for RICOH360 Viewer: {token}\")\n</code></pre>"},{"location":"tutorial2/#run-serverpy","title":"run <code>server.py</code>","text":"<p>Test the RICOH360 Viewer token creation by running <code>python server.py</code>.</p> <p>Expected output is shown below.  The token is shortened in the example.</p> <pre><code>python server.py              \ntoken for RICOH360 Viewer: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.XE4c2tlamFtaTQzbmZqcWM3YjhwNGxjcXAifQ...\n...\n...\n</code></pre>"},{"location":"tutorial2/#content-id","title":"Content ID","text":"<p>We can now instantiate the viewer.  However, we won't be able to see any image in the viewer until we supply it with a contentId.</p> index.html<pre><code>// instantiate viewer object\nconst viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n});\n// start viewer with content\nviewer.start({\n    contentId: \"{{contentId}}\"\n});\n</code></pre>"},{"location":"tutorial2/#requirements-for-contentid","title":"Requirements for contentId","text":"<p>You need the following to get a contentId:</p> <ol> <li>RICOH THETA images loaded up into your account on the RICOH360 Cloud</li> <li>RICOH360 Cloud token generated with AWS Cognito</li> </ol> <p>In addition to the requirements above, you also need the following from RICOH to generate a RICOH360 Cloud token.</p> <ol> <li>Client ID</li> <li>Client Secret</li> </ol> <p>The Client ID is the same ID used to generate the RICOH360 Viewer token.</p> <p>Add the <code>CLIENT_SECRET</code> below the <code>CLIENT_ID</code> in your <code>server.py</code> file.</p> <p></p>"},{"location":"tutorial2/#install-requests","title":"install requests","text":"<pre><code>pip install requests\n</code></pre> <p>Import requests and base64 in your <code>server.py</code> file.</p> server.py<pre><code>import jwt\nimport requests\nimport base64\n\nPRIVATE_KEY = \"\"\"-----BEGIN PRIVATE KEY-----\n...\n...\n</code></pre>"},{"location":"tutorial2/#make-request-to-aws-cognito-for-ricoh360-cloud-token","title":"Make request to AWS Cognito for RICOH360 Cloud token","text":"<p>Use this code to get the RICOH360 Cloud token.  Place it at the bottom of your <code>server.py</code> file</p> server.py<pre><code># generate token for RICOH360 Cloud API\n# Endpoint and authentication for AWS token\ntoken_endpoint = \"https://saas-prod.auth.us-west-2.amazoncognito.com/oauth2/token\"  # noqa: E501\nauth = base64.b64encode(f\"{CLIENT_ID}:{CLIENT_SECRET}\".encode()).decode(\"utf-8\")  # noqa: E501\nheaders = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": f\"Basic {auth}\",\n}\nbody = {\"grant_type\": \"client_credentials\", \"scope\": \"all/read\"}\n\n# Request AWS token\ntoken_response = requests.post(token_endpoint, headers=headers, data=body)\ntoken_object = token_response.json()\nricoh_cloud_access_token = token_object.get(\"access_token\")\nprint(8 * \"=\")\nprint(f\"RICOH360 Cloud Token\\n {ricoh_cloud_access_token}\")\n</code></pre>"},{"location":"tutorial2/#test-ricoh360-cloud-token-creation","title":"Test RICOH360 Cloud Token Creation","text":"<p>Run <code>python server.py</code> to test the RICOH360 Cloud token creation.</p> <p>You should see your two tokens printed to the console.</p> <p></p> <p>Congratulations.  Now that you have the two tokens, you're almost done with the setup.  You just need to get a Content ID for the image you want to display.</p>"},{"location":"tutorial2/#use-cloud-token-to-get-content","title":"Use Cloud Token to Get Content","text":"<p>Remember that our goal is to send a <code>contentId</code> to the HTML file that will display the image.  Prior to building the HTML page, we are getting the content ID to send to the HTML file.</p> <p>Although we are only building the <code>server.py</code> file at this point, let's look at the JavaScript snippet again to understand our goal.</p> index.html<pre><code>// instantiate viewer object\nconst viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n});\n// start viewer with content\nviewer.start({\n    contentId: \"{{contentId}}\"\n});\n</code></pre> <p>Now that goal of the Python server code is top in your mind, let's move back to our Python file and focus on achieving the goal of getting a <code>contentId</code> that we can pass to the viewer in the <code>index.html</code> file.</p> <p>Add this code to the bottom of your <code>server.py</code> file.</p> server.py<pre><code># get content from RICOH360 Cloud server\nprint(\"start process to contact RICOH360 Cloud server to get content\")\n# Fetch content using the token\ncontent_headers = {\"Authorization\": f\"Bearer {ricoh_cloud_access_token}\"}\ncontent_response = requests.get(\n    \"https://api.ricoh360.com/contents?limit=1\", headers=content_headers\n)\ncontent_data = content_response.json()\nprint(\"got response from RICOH360 Cloud server\")\nprint(\"RICOH360 Cloud Content\")\nprint(content_data)\n</code></pre>"},{"location":"tutorial2/#test-contents-api","title":"Test contents API","text":"<p>run <code>python server.py</code></p> <p>Tip</p> <p>Make sure you have content in your RICOH360 Cloud account.</p> <p>You should see the content listing.</p> <p></p> <p>In most editors, you can also click on the link to the thumbnail. On a Mac, I am using CMD-click.</p> <p></p>"},{"location":"tutorial2/#parse-content_id-from-json","title":"parse content_id from JSON","text":"server.py<pre><code># parse content_id\nprint(8 * \"=\")\nprint(\"Get content_id from data\")\ncontent_id = content_data[0][\"content_id\"]\nprint(content_id)\n</code></pre> <p>You should see this output on the console.</p> <pre><code>========\nGet content_id from data\nc6eac34b-9bdc-4ba1-81af-29470fdead79\n</code></pre>"},{"location":"tutorial2/#html-file","title":"HTML File","text":"<p>Now that we have the <code>contentId</code> and the viewer <code>token</code>, we can now create the HTML file that will hold the browser.</p> <p>In a new index.html file, put the following code:</p> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;script src=\"https://r360pf-prod-static.s3.us-west-2.amazonaws.com/viewer/v0.15.0/ricoh360-viewer.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div\n      style=\"\n        position: relative;\n        width: 100%;\n        height: 650px;\n        background-color: #2a303c;\n      \"\n    &gt;\n      &lt;div id=\"viewer\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n      const viewer = new RICOH360Viewer({\n        divId: \"viewer\",\n        onFetchToken: () =&gt; \"{{token}}\",\n      });\n      viewer.start({\n        contentId: \"{{contentId}}\",\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial2/#connect-serverpy-and-indexhtml","title":"Connect <code>server.py</code> and <code>index.html</code>","text":"<p>We just need to connect the backend <code>server.py</code> file with the frontend <code>index.html</code> file.  To connect the files, we will use Flask.</p> <p><code>pip install Flask</code></p> <p>In the <code>server.py</code> file, import the Flask packages.</p> server.py<pre><code>from flask import Flask, render_template\n</code></pre> <p>Specify how to start Flask and let the application know that the <code>index.html</code> file is in the same folder as the <code>server.py</code> file.</p> <p>Below the section where you specified <code>CLIENT_SECRET</code>.</p> server.py<pre><code>app = Flask(__name__)\napp.template_folder = \".\"\n</code></pre>"},{"location":"tutorial2/#in-serverpy-create-route-to-indexhtml","title":"in <code>server.py</code> create route to <code>index.html</code>","text":"<p>At the bottom of your <code>server.py</code> file, add the route to <code>index.html</code></p> server.py<pre><code>@app.route(\"/\")\ndef index():\n    print(f\"contentId: {content_id}\")\n    return render_template(\"index.html\",  token=token, contentId=content_id)\n</code></pre>"},{"location":"tutorial2/#start-flask-server","title":"start flask server","text":"<p>At the bottom of <code>server.py</code>, add this:</p> server.py<pre><code>app.run(port=3000, debug=True)\nprint(\"Open browser at http://localhost:3000 or http://127.0.0.1:3000\")\n</code></pre>"},{"location":"tutorial2/#run-application","title":"run application","text":"<p><code>python server.py</code></p> <p></p> <p></p> <p>Congratulations!  You have now configured the RICOH360 Viewer.</p> <p>Please see the other tutorials for customization of the browser and connection with the powerful RICOH360 Cloud APIs.</p>"},{"location":"tutorial2/#bonus-challenges","title":"bonus challenges","text":"<p>There are two workflows for challenges:</p> <p>1: you are using a Python script supplied to you in a zipped file with general testing Client ID, Client Secret and Private Key included in the Python Script.  This account is pre-loaded with many sample images. Jump straight to the change image challenge.</p> <p>or</p> <p>2: you are using credentials specific to your company. If you are using the credentials specific to your company, you must first load multiple images into your RICOH360 Cloud account using the RICOH Content API.</p>"},{"location":"tutorial2/#change-image","title":"change image","text":"<p>In <code>server.py</code> file, change the number of images you get from the RICOH360 Cloud server from 1 to 5.</p> <pre><code>content_response = requests.get(\n    \"https://api.ricoh360.com/contents?limit=5\", headers=content_headers\n)\n</code></pre> <p>When you get the <code>content_id</code>, change the index of the content from 0 to 1.</p> <pre><code>content_id = content_data[1][\"content_id\"]\n</code></pre> <p>reload browser.</p> <p>You should see the next image.</p> <p></p> <p>Change the index to 2.</p> <pre><code>content_id = content_data[2][\"content_id\"]\n</code></pre> <p>Reload the browser to see the next image.</p> <p></p>"},{"location":"tutorial2/#enhance-image","title":"enhance image","text":"<p>In <code>index.html</code>, apply <code>transform: 'enhancement'</code> below the contentId.</p> <pre><code>viewer.start({\n  contentId: \"{{contentId}}\",\n  transform: 'enhancement'\n});\n</code></pre> <p>The image is now enhanced.</p> <p></p>"},{"location":"tutorial2/#annotation","title":"annotation","text":"<p>Set up a constant for the viewer ui.  In the toolbar, add the annotation button.</p> <p>Place the <code>ui</code> constant after the <code>onFetchToken</code> callback.</p> <pre><code>const ui = {\n  toolbar: {\n    annotationButton: {\n      isHidden: false\n    }\n  }\n}\nconst viewer = new RICOH360Viewer({\n  divId: \"viewer\",\n  onFetchToken: () =&gt; \"{{token}}\",\n  ui\n});\n</code></pre> <p></p>"},{"location":"tutorial2/#drawing","title":"drawing","text":"<pre><code>const ui = {\n  toolbar: {\n    annotationButton: {\n      isHidden: false\n    },\n    drawingButton: {\n      isHidden: false\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial2/#split-screen","title":"split-screen","text":"<p>The split-screen control is in the <code>verticalPanel</code>.</p> <pre><code>const ui = {\n  toolbar: {\n    annotationButton: {\n      isHidden: false\n    },\n    drawingButton: {\n      isHidden: false\n    }\n  },\n  verticalPanel: {\n    isHidden: false,\n    topMargin: 25,\n  }\n}\n</code></pre> <p></p>"},{"location":"tutorial2/#control-of-right-pane","title":"control of right pane","text":"<ol> <li>change <code>viewer.start</code> to delete the transform</li> <li>create a function to switch scene</li> <li>in the function, add the pane \"1\", which is the right pane</li> <li>create a button to run the function to switch the scene</li> </ol> <pre><code>const viewer = new RICOH360Viewer({\n    divId: \"viewer\",\n    onFetchToken: () =&gt; \"{{token}}\",\n    ui\n  });\nviewer.start({\n  contentId: \"{{contentId}}\",\n  // delete the transform line here\n});\nconst enhanceRightPane = () =&gt; {\n  viewer.switchScene(\n  {\n    contentId: \"{{contentId}}\",\n    transform: 'enhancement'\n  }, \"1\"\n  );\n}\n</code></pre> <p>Below the viewer, add this:</p> <pre><code>&lt;button type=\"button\" onclick=\"enhanceRightPane()\"&gt;enhance right&lt;/button&gt;\n</code></pre>"}]}